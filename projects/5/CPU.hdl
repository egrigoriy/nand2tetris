// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	// "Make" signals for A-instruction and C-instruction
	Not(in=instruction[15], out=ainstruction);
	Not(in=ainstruction, out=cinstruction);
	// Mux16 to select ARegister input between instruction and ALU output feedback
	Mux16(a=instruction, b=aluout, sel=cinstruction, out=aregin);
	// Load to ARegister if A-instruction or C-instruction with destination ARegister
	Or(a=ainstruction,b=instruction[5], out=loadtoareg);
	ARegister(in=aregin, load=loadtoareg, out=aregout, out[0..14]=addressM);
	// Load to DRegister if C-instruction with destination DRegister
	And(a=cinstruction, b=instruction[4], out=loadtodreg);	
	DRegister(in=aluout, load=loadtodreg, out=dregout);
	// Mux16 to select ALU input between ARegister and Memory
	Mux16(a=aregout, b=inM, sel=instruction[12], out=aregorinm);
	// Wire ALU
	ALU(x=dregout, y=aregorinm, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluout, zr=zr, ng=ng, out=outM);
	// Write to RAM memory if C-instruction with destination RAM
	And(a=cinstruction, b=instruction[3], out=writeM);
	// Manage jump condition
	Condition(islt=instruction[2], iseq=instruction[1], isgt=instruction[0], zr=zr, ng=ng, out=isconditiontrue);
	// Jump is applied only for C-instruction
	And(a=isconditiontrue, b=cinstruction, out=jump);
	// If no jump then increment
	Not(in=jump, out=inc);
	PC(in=aregout, load=jump, inc=inc ,reset=reset, out[0..14]=pc);
}